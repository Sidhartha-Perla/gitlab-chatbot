### Pipeline Authoring Letter from the Editor


First and foremost, I would like to thank our community of users and the Pipeline Authoring team for an amazing FY22. The team was able to deliver a significant amount of value while maneuvering between different priorities, directions, and requirements. The community of users helped us shape the product and solution by actively engaging on issues, threads, and comments. Thank you for all the hard work and dedication you put into the product.
In Q1 the pipeline authoring had introduced the [Pipeline Editor](https://about.gitlab.com/blog/2021/02/22/pipeline-editor-overview/), throughout this year, we've improved the Editor with additional capabilities. In addition, our team is responsible for the CI syntax and the pipeline graph, which means there is a constant demand to support, fix and enhance our capabilities around authoring and visualizing pipelines. Later this year, the team was handed over the responsibilities for CI variables, with a rich feature set and a growing number of issues (approximately 20% of our backlog). In the coming FY23 the team needs to continue its focus on growth by focusing on the Pipeline Editor, UI improvements, CI templates, and variables, however, without increasing our current headcount, it would be hard to achieve.


Looking back on the list of accomplishments in FY22 our year had started with the release of the Pipeline Editor with the purpose to improve the way users author their pipeline. The Editor comes with key capabilities around linting, validation, and visualization of a pipeline (before doing a single commit). The Editor comes with a branch selector that allows users to leverage the Editor and its capabilities while working on a non-default branch. The pipeline Editor received positive feedback by our users and today has approximately 16K unique users per week. In addition we've refactor and improved the pipeline graph performance and introduce the [Dependencies view](https://gitlab.com/groups/gitlab-org/-/epics/4509) to better support DAG users. We succesfully [Matured](https://gitlab.com/gitlab-org/gitlab-design/-/issues/1534) Pipeline Authoring category from minimal to viable, and
deliver some of the most popular [issues](https://gitlab.com/gitlab-org/gitlab/-/issues?label_name%5B%5D=group%3A%3Apipeline+authoring&scope=all&sort=popularity&state=closed) from our backlog, here are just a few examples:
   - [Allow need to refer to a job in the same stage ](https://gitlab.com/gitlab-org/gitlab/-/issues/30632) (241 upvotes)
   - [Make it possible to control build status using exit codes](https://gitlab.com/gitlab-org/gitlab/-/issues/16733) (189 upvotes)
   - [Pipeline doesn't succeed when manual jobs using new DAG dependency](https://gitlab.com/gitlab-org/gitlab/-/issues/31264) (167 upvotes)
   - [multiple cache in a same job](https://gitlab.com/gitlab-org/gitlab/-/issues/32814) (107 upvotes)

Currently, Pipeline Authoring is composed of 5 Engineers (2FE + 3BE), 2 EMs,  1 SET, and 1 UX designer. We currently have an opening for a [frontend engineering](https://boards.greenhouse.io/gitlab/jobs/5608654002) if you are interested in applying! With this backfill of a FE engineer, the team is the exact size we started a year ago. The increasing maintenance cost for the pipeline editor and the addition of CI variables, I have concerns about our ability to continue to focus on growth in FY23.


Over the last year, we saw how our users adopted our features. I believe that our team needs to continue its focus on growth, our solution is still young with many opportunities to invest in, major themes we'll try to focus on in the coming year are. Double down on the pipeline editor - The Editor is one of our differentiators in CI. It is our team's growth engine today. We've seen evidence of the growing number of users leveraging it and its capabilities. We should continue our investment in the Editor. Some of our plans for FY23 is adding [Auto-complete](https://gitlab.com/gitlab-com/Product/-/issues/3388), [Pipeline simulation](https://gitlab.com/groups/gitlab-org/-/epics/6498),[Add `include:` file links to the pipeline editor](https://gitlab.com/groups/gitlab-org/-/epics/7064) and improving the user experience. Those improvements are also likely to affect our SuS score significantly.
GitLab CI has many capabilities; however, in some cases, our UI for those capabilities is still in the MVC phase. The UI experiences often are non-intuitive or missing additional functionality. Our users expect to complete those missing capabilities and improve their user experience.
In addition to usability in our MVCs, environment variables are table stakes for CI solutions. With many popular issues, variables are now 20% of the team's backlog and could drive [PGMAU for Pipeline Authoring team](https://gitlab.com/gitlab-com/Product/-/issues/3179). Failing to invest in this key feature would lead to customer frustration, churn, and loss of revenue, more information on the [variables investment case](https://gitlab.com/gitlab-com/Product/-/issues/3178).
As outlined in the following [Opportunity canvas](https://docs.google.com/document/d/12I_BbdH4kqBBCBEwsoZdvAoDfubODy-tH5ubAB0219I/edit) (pending approval), the CI catalog is one of the most popular ask/requirements that come out from many customer conversations. A CI catalog could be a growth engine for GitLab, It can encourage cross-stage collaboration, potentially drive high impact to our Stages per User (SpU) metric. A CI catalog is also highly coupled and compliments our [CI/CD templates vision](https://gitlab.com/groups/gitlab-org/-/epics/6022), which serves as the main [JTBD](https://handbook.gitlab.com/handbook/engineering/development/ops/verify/pipeline-authoring/jtdb/#) for large enterprise users.

As mentioned above, the team size has not been changed. However, more responsibilities were added in FY22. Looking into FY23, adding 3 engineers as outlined in this [business case](https://gitlab.com/gitlab-com/Product/-/issues/3178) would empower our group to deliver a complete variable solution and clear the path for the rest of the team to focus on the rest of our initiatives. Without this, our team would have to drop the work for templates and provide a partial solution for variables.






