---
layout: markdown_page
title: "Section Direction - Ops"
description: "The GitLab Ops Section is comprised of the Verify, Package, Deploy and Monitor stages of the DevOps lifecycle."
canonical_path: "/direction/ops/"
---

- TOC
{:toc}
# What We Do

## Ops Section Vision
Our Vision for the Ops section is to set up developers for efficient and safe software delivery using the best practices in CI/CD, operations and integrated security.

![Ops Section Vision](OpsSectionVision.png)
<!-- source: https://docs.google.com/presentation/d/1CY-GGAvoZjQti9kG2u6W5JEqNdX0Gp62Av4AqRvxwkw/edit#slide=id.g1212b3f7f3e_0_0 -->

## Composition
<%= devops_diagram(["Verify","Configure","Package","Monitor","Release"]) %>
<!-- source: https://docs.google.com/presentation/d/1606LcicYP-QKMjHHzTEvZSrx5qkW9LpHiKQUWlggdEk/edit#slide=id.g82767e51d3_1_0 -->

The Ops Section is comprised of five stages: Verify, Package, Deploy and Monitor. For a deeper view of the direction of each specific stage please visit the respective Direction Pages linked below:
- [Verify](/direction/verify)
- [Package](/direction/package/)
- [Deploy](/direction/deploy/)
- [Monitor](/direction/monitor/)

[Market analysts (internal)](https://drive.google.com/drive/folders/1Yl9TVh8-ArHH7nmaVI5JjVeiAyyi2a84) often describe these stages as automated software quality (ASQ, partially correlated with Verify, Package and Deploy), IT automation and configuration management (ITACM, correlated with Deploy), and IT operations management (ITOM, partially correlated with Monitor). The Ops section also covers CI/CD (Verify/Deploy), IT Infrastructure Monitoring/APM (Monitor), CDRA (Deploy), Infrastructure Configuration (Deploy) and Package and Binary Management (Package) [analyst categories](/analysts/).

In some contexts, "ops" refers to operators. Operators were the counterparts to Developers represented in the original coining of the term [DevOps](https://en.wikipedia.org/wiki/DevOps). That definition highlighted the rift between the two groups and a need for collaboration. At GitLab, we use "ops" to mean operations - any component of the value stream delivery platform after a developer commits code. Our [developer first perspective](https://handbook.gitlab.com/handbook/product/product-principles/#developer-first) means our use of the word "ops" is focused on enabling developers to configure tools and perform operations tasks **first**. We have support for [platform operations and SRE teams](#today) who provide Pipelines, Infrastructure and alert response tools to development teams, and ambitious plans to [support traditional operators in the future](#medium-term-1-2-years).

## 3 Year Strategy
GitLab's Ops strategy follows that of [GitLab's company strategy](https://handbook.gitlab.com/handbook/company/strategy/). Just like our company [mission](https://handbook.gitlab.com/handbook/company/mission/#mission), we will enable **everyone to contribute** beyond application code to other digital artifacts that increasingly define the performance, reliability, and resilience of the world's software. We will pursue that mission and capitalize on the opportunities (such as, developer buyer power, IT skills gaps, a move towards Kubernetes, and our roots in source-control and CI) by utilizing a [dual-flywheel](https://handbook.gitlab.com/handbook/company/strategy/#dual-flywheels) approach. This approach starts with attracting developers performing DevOps tooling and operations tasks to our Free/Core tier. As we build best of breed tools for them we will [co-create](/community/contribute/) to drive product improvements. This will generate revenue for higher product tiers and additional investment for supporting the modern development teams.

More specifically, we will achieve this by enabling [easy-to-discover](https://handbook.gitlab.com/handbook/product/product-principles/#discoverability-without-being-annoying), [working-by-default](https://handbook.gitlab.com/handbook/product/product-principles/#configuration-principles), workflows that support doing powerful, complex actions with a minimum configuration. We want to take advantage of our single application so that, while each team may have their own views or dashboards in the product that support their day to day, the information is available everywhere and to everyone, embedded naturally into their day-to-day workflow where it's relevant. For example:

* Allow platform teams to share operational definitions (infrastructure, environments, deployment pipelines, monitoring configuration) with development teams and for development teams to easily contribute improvements to their definition
* At scale management of deployments with actionable analytics and dashboards to support management of development teams
* Operational tasks that ensure reliability, like chaos engineering and performance testing, are shifted left
* Software Engineers and Testers looking at an individual issue can see which environment(s) that issue has been deployed to
* Satisfying compliance needs and supply chain security by improving the traceability of artifacts throughout the build, test, deploy process
* Incident responders can immediately see details of the last deploy, recent code changes and errors, traces and logs needed to help them get their service back up quickly

The end result is that even complex delivery flows become part of everyone's primary way of working. There isn't a context shift (or even worse, a switch into a different tool) needed to start thinking about delivery or operations - that information is there, in context, from your first commit. The centerpiece of this strategy is our [Get Things Done Easily theme](/direction/ops/#get-things-done-easily).

### Market Predictions
![Ops Section TAM Expansion](OpsSectionTAMExpansion.png)
<!-- source: https://docs.google.com/presentation/d/1n1h_JyGonwBn1CMST6mRjZpj8u80xz2KcXAeZXVimrU/edit#slide=id.gc7dccd274f_0_5 -->

The Ops Section stages represent over 50% of GitLab's future CSM expansion.
In three years the Ops market will:
* Consider CI a critical capability for bridging between Dev, Sec & Ops to create truly high-performing DevSecOps organizations
* Consider Package management an integrated requirement for any CI/CD platform
* Provide seamless progressive delivery capabilities as a critical tool for enabling lean product-focused development
* Consolidate around Kubernetes as the de facto multi-cloud abstraction layer which application delivery teams interact with to deploy and maintain software
* Have adapted DevSecOps processes to also include infrastructure and observability into CI/CD pipelines providing more responsive, more secure, and higher quality production applications

### Themes
Our Ops Section themes are additive to our overall [Yearly Themes](/direction/#fy24-product-investment-themes). In FY24, we plan to execute on:

1. World-class DevSecOps by delivering [GitLab Events](https://gitlab.com/groups/gitlab-org/-/epics/8349), [CI/CD Catalog](https://gitlab.com/groups/gitlab-org/-/epics/7462), enabling GitOps in GitLab with Flux, integrating a cluster overview under Environments, and prioritizing usability of our key workflows
1. Advanced security and compliance by delivering [SLSA 4 framework requirements](https://about.gitlab.com/direction/supply-chain/#current-position-and-vision), investing in [Secrets Management Direction](https://about.gitlab.com/direction/software_supply_chain_security/pipeline_security/secrets_management/)
1. Observability, analytics, & feedback via our investment in [end-to-end error tracking](https://gitlab.com/groups/gitlab-org/opstrace/-/epics/45).
1. GitLab Data Science support with SaaS Runner GPU improvements

### Ops Section Plan

Our plan is to continue to lean into [adoption through usability](https://handbook.gitlab.com/handbook/product/product-principles/#drive-product-usage) and [discoverability](https://handbook.gitlab.com/handbook/product/product-principles/#discoverability-without-being-annoying) in our core stages of Verify, Package, and Deploy. This will mean sustained focus on onboarding users and organizations from [SCM, to CI to Deployment](https://handbook.gitlab.com/handbook/product/product-principles/#multi-feature-usage-adoption-journey).

For the Monitor stage, we will pursue our common progression product approach to breadth, namely:
1. Create MVCs which showcase the possibility of new categories in a single-application
1. Leverage the high rate of learning provided by dogfooding to achieve viability
1. Shift focus to awareness and acquisition of viable capabilities by increasing SMAU & GMAU
1. Begin building completeness and tier value as a result of increased SMAU

As a result our [performance indicators](#performance-indicators) and tier strategies are aligned to the maturity of each stage.

In doing so, over the next 12 months we will choose **NOT** to:

* Invest in Verify stage features like:
  * [Tracking accessibility results over time](https://gitlab.com/gitlab-org/gitlab/issues/36171).
  * [Merge Trains API Support](https://gitlab.com/groups/gitlab-org/-/epics/5864).
  * [Automatic flaky test minimization](https://gitlab.com/gitlab-org/gitlab/issues/3583).
  * Creation and [management](https://gitlab.com/gitlab-org/gitlab/-/issues/334558) of tests (automated or manual).
  * Real-time pipeline and job statuses
  * [Pipeline Simulation](https://gitlab.com/groups/gitlab-org/-/epics/6498) or local pipeline debugging, even though it is a highly requested feature
* Invest in some specific Package stage features like:
  * [Dependency Firewall](/direction/package/), as we'll focus on making the [Dependency Proxy](/direction/package#dependency-proxy) functional and complete.
  * Package manager formats and features that are not NPM, Maven, C++, .NET, Linux, Ruby, Python, PHP, or Go or community contributed.
* Invest in specific Deploy stage features like:
  * [Service Now Integration](https://gitlab.com/gitlab-org/gitlab/issues/8373) to control rollbacks or other pipeline actions is not in the cards.
  * [Continuous Delivery for Machine Learning](https://gitlab.com/groups/gitlab-org/-/epics/4517) - Add support for training and testing pipelines for Machine Learning
* Invest heavily in ease of use and experience for individuals attaching Kubernetes clusters to projects. While there are use cases for project-level attachment, it is a higher priority to provide Infrastructure Platform teams with an enhanced cloud-native management experience.
* Invest heavily in automated cluster cost-optimization efforts - We will pursue this as our adoption by platform teams increases.


# Why We Do It

## Impact

The [Ops Section stages](#composition) are at the forefront of GitLab's single DevOps platform vision of enabling everyone to contribute. These stages represent **half** of GitLab's Total Addressable Market expansion during the next five years and the [markets](#market) where we have some of the lowest current penetration. As a result the opportunity and impact from R&D investment in these stages are the highest in the company.

[User growth](https://handbook.gitlab.com/handbook/product/performance-indicators/#ops---section-cmau---sum-of-ops-section-smau) in Ops Section stages improves [Stages per Organization](https://handbook.gitlab.com/handbook/product/performance-indicators/#stages-per-organization-spo) beyond typical SCM customers - providing the value of a single DevOps platform to our customers. Adding new types of users in turn increases [unique active users](https://handbook.gitlab.com/handbook/product/performance-indicators/#unique-monthly-active-users-umau), while adding paid tier features increases Average Revenue Per User (ARPU) and broad adoption across users in our customers' organizations increases net retention. All of these are critical drivers of our GitLab's business performance.

We would appreciate your feedback on this direction page. Please take [our survey](https://forms.gle/ex9zZ4sKmE1FKiHr9), [email Jackie Porter](mailto:jporter@gitlab.com) or [propose an MR](https://gitlab.com/gitlab-com/www-gitlab-com/edit/master/source/direction/ops/template.html.md.erb) to this page!

## Market

![Ops Section Market by Stage](OpsSectionMarket.png)
<!-- source: https://docs.google.com/presentation/d/1n1h_JyGonwBn1CMST6mRjZpj8u80xz2KcXAeZXVimrU/edit#slide=id.gc7dccd274f_0_5 -->

The total addressable market (TAMkt) for **DevOps tools** targeting [these stages](https://internal.gitlab.com/handbook/product/investment/) was [$5.2B in 2019 and is expected to grow to $10.7B by 2024 (18.8% CAGR) (internal)](https://docs.google.com/spreadsheets/d/1LO57cmXHDjE4QRf6NscRilpYA1mlXHeLFwM_tWlzcwI/edit?ts=5ddb7489#gid=947614257). This analysis is considered conservative as it focuses only on developers and doesn't [include additional potential users](https://handbook.gitlab.com/handbook/customer-success/csm/).
This is a deep [profit pool](https://en.wikipedia.org/wiki/Profit_pools) and represents a significant portion of GitLab's expanding addressable market. As organizations further adopt DevOps, developer focused ops tools account for a larger share of market. This market has traditionally targeted IT Architects, System Admins and Operators where large hardware budgets enabled expensive IT tools to flourish.

The [market is well established (internal)](https://drive.google.com/file/d/1VvnJ5Q5PJzPKZ_oYBHGNuc6D7mtMmIZ_/view), but the participants are evolving rapidly. Existing leaders in single stages of the DevOps lifecycle are expanding to build [value stream delivery platforms (internal)](https://drive.google.com/file/d/1HuRjVqH4D8qEuWkhv77XT6PEnnpml2gn/view?usp=sharing), what GitLab calls complete DevOps platforms delivered as a single application. These existing players are doing so via [acquisition](https://devops.com/digital-ai-the-companies-formerly-known-as-xebia-labs-collabnet-plus/) and product development. The leaders run the gamut from GitHub with their strong position in the SCM market and their growing capabilities to [compete in CI/CD](/direction/verify/continuous_integration/#competitive-landscape), to Delivery focused tools such as Harness and JFrog, to [Grafana, DataDog and New Relic with their strong positions in Observability](/direction/monitor/#landscape) and expansion into deployment and incident response. All are pivoting to pursue the value stream delivery platform market.

## Current Position
Despite many strong players, GitLab's market share in the Ops section is growing, especially in the Verify, Package, and Deploy stages. For Monitor, our unique perspective as a single and complete DevOps application positions us for growth.

You can see how users currently use our various stages in our [Ops Section product performance indicators (internal)](https://internal.gitlab.com/handbook/company/performance-indicators/product/ops-section/) and [Ops Section Usage Dashboard (internal)](https://app.periscopedata.com/app/gitlab/781120/Ops-Section-Dashboard?).

We are [continually investing in R&D](https://handbook.gitlab.com/handbook/product/categories/ops/#who-we-are) in all Ops Section stages. The maturity of each stage and category can be found in our [maturity page](/direction/#maturity). Our [investment in the Ops section stages (internal)](https://internal.gitlab.com/handbook/product/investment/#scoring-results) is critical to both enabling enterprise users to continue on their DevOps maturity journey and completing our [complete DevOps platform vision](/direction/#vision). Driving adoption across multiple Ops stages enables [early adopters](https://handbook.gitlab.com/handbook/product/product-principles/#prioritize-current-adopters) to recognize the [benefit of a single application](https://handbook.gitlab.com/handbook/product/categories/gitlab-the-product/#single-application).

## Challenges

![Ops Section Challenges](OpsSectionChallenges.png)
<!-- source: https://docs.google.com/presentation/d/1n1h_JyGonwBn1CMST6mRjZpj8u80xz2KcXAeZXVimrU/edit#slide=id.gc7dccd274f_0_5 -->

We face a wide range of market challenges (in priority order):
1. GitLab created a new market for [DevOps platforms delivered as a single application](https://handbook.gitlab.com/handbook/marketing/strategic-marketing/messaging/#short-single-sentence). We were an early entrant in this market [before it was defined](https://handbook.gitlab.com/handbook/product/categories/gitlab-the-product/single-application/) but there are many, and will be more, fast followers. Key players include large established tech firms (Microsoft, Atlassian), growth companies that have established positions in specific stages (Harness, DataDog), and newly consolidated platforms from acquisition (JFrog, CollabNet/VersionOne/XebiaLabs). [By 2023, the number of companies switching to VSDPs is expected to quadruple (internal)](https://drive.google.com/file/d/1HuRjVqH4D8qEuWkhv77XT6PEnnpml2gn/view?usp=sharing).
1. Few companies have been able to successfully bridge between Developer and Operator personas. Building tools that satisfy both sets of [jobs-to-be-done](https://handbook.gitlab.com/handbook/product/ux/jobs-to-be-done/) is difficult. Without deeply understanding new personas (such as [Platform Engineers](https://handbook.gitlab.com/handbook/product/personas/#ingrid-infrastructure-operator)) and tasks, market entrants' products result in a checklist of modules that lack a cohesive experience for users.
1. In recent years we've seen the emergence of large [public cloud infrastructure providers](https://en.wikipedia.org/wiki/Cloud_computing#Public_cloud) moving from a focus on infrastructure services for operators towards developer tools. These providers could challenge current notions of [multi-cloud](https://en.wikipedia.org/wiki/Multicloud) by creating great, integrated experiences in their tools for developers to create, verify, and deploy applications to the provider's infrastructure. Microsoft, with their acquisiton of GitHub and it's burgeoning preference for Azure deployments is a first example. There is a possibility that these provider-centric ecosystems present organizations with a choice of investing in a best-of-breed platform with a small subset of projects or a sufficient enough platform used by all.
1. Beyond the key players, there is also rapid innovation. This makes for a market where there is proliferation of new technology concurrent to consolidation of the winning technologies into comprehensive platform players. Ease of deployment for CI/CD and operational tools has aided this expansion. Developers and operations teams can easily instrument and utilize new technologies alongside their existing software development pipelines with less risk, and in quicker time frames than under previous models where it required diligent planning and months of installation and configuration.
1. The macroeconomic environment in 2023 has slowed from prior year's growth, as indicated by a recent [Gartner Report on IT Spending in 2023](https://www.gartner.com/en/newsroom/press-releases/2023-01-18-gartner-forecasts-worldwide-it-spending-to-grow-2-percent-in-2023). This poses a headwind toward all software providers and the industry as a whole could face increased pressure.

Outside of market challenges we have some internal ones as well:
* While we are focused on it - generally we are still not [dogfooding](https://handbook.gitlab.com/handbook/values/#dogfooding) the Deploy and Monitor stage features sufficiently. Within GitLab we don't have a dedicated Platform Team that serves as our internal model for our [Primary Target Persona](#medium-term-1-2-years). This has the effect of [slowing our rate of learning](https://handbook.gitlab.com/handbook/values/#dogfooding), and putting us in the position of not having immediate real-world validation of product investments.
* Our [Product Hierarchy](https://handbook.gitlab.com/handbook/product/categories/#hierarchy) means we have groups narrowly focused on stages or categories. This has the effect of limiting our ability to deliver truly [delightful](https://en.wikipedia.org/wiki/Customer_delight) experiences for users. We've started tracking the [Ops section's contribution to Stage Per Organization](https://internal.gitlab.com/handbook/company/performance-indicators/product/ops-section/#ops---section-spo---ops-section-contribution-to-stages-per-organization) to further mitigate this challenge.
* Contributing to a growing, large monolith can be slower and more risky than building independent services and applications. We have seen our cycle time slowed down by long MR reviews. We have also experienced the risk of not building for scale first by introducing functionalities only to see that new service cause outages.
* Having a large scope means having to make more trade-offs. These trade-offs often mean divesting from further-horizon investment in favor of short term gain. Being able to stay disciplined to our [investment allocation - internal](https://internal.gitlab.com/handbook/product/investment/#investment-types) will be important to penetrate new markets.

## Opportunities
Given the above challenges, there are key opportunities we must take advantage of (in priority order):

1. **Rise of the Platform Engineer:** Gartner has [suggested](https://www.gartner.com/en/articles/what-is-platform-engineering) that "platform engineering is an emerging technology that can accelerate the delivery of applications." The 2022 report expects that by 2026 80% of enterpises will establish a platform team to improve developer experience and effectiveness with resuable services and tools related to delivery. GitLab is well positioned as a unified platform to deliver on the emerging platform engineering trend.
1.  **Cross-Use Case Workflows:** As a single DevSecOps platform, a single user may action and span multiple [use cases](https://handbook.gitlab.com/handbook/use-cases/#specific-use-cases) in their daily experience with GitLab. We have an opportunity to prompt users to explore new functionality within their existing workflow. For example, we can prompt users without CI/CD on projects that contain Terraform code to utilize our [Terraform MR review widget](https://docs.gitlab.com/ee/user/infrastructure/#terraform-integration-in-merge-requests). Doing so will organically [inspire more adoption and usage of cross-platform tools](https://handbook.gitlab.com/handbook/marketing/growth/). This usage will result in an improvement of productivity for our users, supporting the expansion of seats to include more users within an organization's instance.
1. **DevOps Adoption Pains:** For many organizations their [DevOps journey is currently stalled as they attempt to adopt continuous delivery in an effort to increase their deployment frequency](https://services.google.com/fh/files/misc/state-of-devops-2019.pdf). GitLab's [common method for defining CI and CD workflows](https://docs.gitlab.com/ee/ci/) allows organizations to use the same tools their teams love for CI when overcoming this new challenge. DevOps transformations are also hampered by a [lack of IT operations skills (internal)](https://docs.google.com/presentation/d/1tt6-XqnhCmsx8Jfy39hit8OgggeaFUUxxU7TnNsG4Qk/edit#slide=id.p19). Most organizations have taken to creating [infrastructure platform teams](https://hackernoon.com/how-to-build-a-platform-team-now-the-secrets-to-successful-engineering-8a9b6a4d2c8) to [minimize the amount of operations expertise required by DevOps team members (internal)](https://drive.google.com/file/d/1GexcUo4FzmhmV30tnjn7x3hyk1plEK4-/view). Those teams' traditional operations tools are not integrated within the development team's workflow, and force an unneeded tradeoff between reliability and speed. This tradeoff results in increased down-time and problems with recovering from disaster - or slowed business agility. Value Stream Delivery Platforms like GitLab can [move a team from reactive to proactive reliability without sacrificing development velocity (internal)](https://drive.google.com/file/d/1hJq-JKveNbxA2FryoBxcurMRZuYJ3b4e/view?usp=sharing). GitLab's combination of Create, Verify, Deploy and Monitor allow our users to [measure all four aspects of their delivery performance](https://gitlab.com/groups/gitlab-org/-/epics/4358). Improving the resuability, standardization, and enforcement of best practices via Shared Resource Library or [Service Catalog](https://gitlab.com/gitlab-org/gitlab/-/issues/360996) is top of mind to mitigate the DevOps implementation challenges of enterprises.
1. **Increasing Developer buying power:** In the move to DevOps, [tools focused on enabling developers garner an increased share of wallet](http://videos.cowen.com/detail/videos/recent/video/6040056480001?autoStart=true). [71% of organizations (internal)](https://docs.google.com/presentation/d/1tt6-XqnhCmsx8Jfy39hit8OgggeaFUUxxU7TnNsG4Qk/edit#slide=id.p4) will achieve full DevOps adoption on some projects within a year. [35% of DevOps implementations include Monitor stage capabilities, 30% include Deploy stage ones (internal)](https://docs.google.com/presentation/d/1tt6-XqnhCmsx8Jfy39hit8OgggeaFUUxxU7TnNsG4Qk/edit#slide=id.p14). This increasing buyer power is driven by the cultural and organizational changes (often called Digital Transformation Initiatives) needed for DevOps to deliver software faster. This also applies to traditional IT teams who will, [by 2024 see 30% of their focus move from IT ops to continuous engineering](https://drive.google.com/file/d/1fM_ejuOeGIXgxlCQuqQ1MGbb4_x4iA2l/view) via role shifts like moving from system admin roles to SRE roles.
1. **Market Recognition:** The IT market has recognized the value of GitLab's core proposition, a [complete DevOps platform delivered as a single application](https://handbook.gitlab.com/handbook/product/categories/gitlab-the-product/single-application/). We know because single-function companies [are consolidating](https://azure.microsoft.com/en-us/blog/accelerating-devops-with-github-and-azure/), and analysts have [created a new category - VSDP](https://www.gartner.com/en/documents/3979558/the-future-of-devops-toolchains-will-involve-maximizing-) - to describe that proposition. One key value driver for this market is the shifting-left of traditional Ops tasks ensuring reliability doesn't have to come at the expense of speed.
1. **IaC and GitOps are strong first steps towards AIOps:** AIOps strives to provide self-learning, self-healing IT operations massively impacting IT operations professionals and their tools. However, it is [early in the hype cycle (internal)](https://drive.google.com/file/d/1GexcUo4FzmhmV30tnjn7x3hyk1plEK4-/view) and being successful will depend on DevOps teams first defining their infrastructure, operations, and observability as code. IT Operations teams are first adopting automation and programmable infrastructure (Automated Ops) in order to keep up with developer velocity. Experience with developer tools like source control and CI/CD tooling are becoming requirements for operations teams, [often replacing inefficient CMDB tools in the process](https://drive.google.com/file/d/19_tb0tyogGZ7viyN1H3aueID7ah-_mHl/view). GitLab's roots in SCM and CI and the entire [GitOps](https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/usecase-gtm/gitops/), [Infrastructure as Code](/direction/delivery/infrastructure_as_code/), and Observability as Code movements will help us attract and add value for [Ops personas](#who-is-it-for) and set us up for future AIOps success.
3. **Continuing commoditization of tooling:** Well-funded technology companies (Google, Netflix, Lyft, Spotify etc.) that are focused on scaling have a history of releasing open source software that leap-frog vendor software. Examples include Kubernetes, Prometheus, and many of the foundational projects in CNCF. In the observability space, [70% of instrumentation is expected to be open-source by 2025](https://drive.google.com/file/d/1fM_ejuOeGIXgxlCQuqQ1MGbb4_x4iA2l/view). DevOps vendors have to continue to move up the value chain as previously specialized software gets commoditized. GitLab has the opportunity to mind the [Developer Experience Gap](https://redmonk.com/sogrady/2020/10/06/developer-experience-gap/) and provide an easy to use and effective software development toolchain.

## Useful Resources
Below are some additional resources to learn more about Ops:
* [The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations](https://www.amazon.com/dp/1942788002/)
* [Accelerate: The Science of DevOps: Building and Scaling High Performing Technology Organizations](https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339)

## Performance Indicators
The performance of the Ops section is defined as the total adoption of its stages as measured by the [Ops Section Total Stages Monthly Active Users (internal)](https://internal.gitlab.com/handbook/company/performance-indicators/product/ops-section/#ops---section-cmau---sum-of-ops-section-smau)) (Ops Section CMAU). Ops Section TMAU is a sum of all SMAUs across the five stages in the Ops Section (Verify, Package, Deploy & Monitor).

To increase the Ops Section TMAU, the product groups are focused on driving their stage adoption. We are especially focused on increasing adoption of the Verify and Deploy stages by driving CI usage from existing SCM users and driving CD usage from existing CI users. This will activate users into Ops Section TMAU and enable them to continue to adopt other Ops section stages as described on Ops section adoption journey (see also the [product-wide adoption journey](https://handbook.gitlab.com/handbook/product/growth/#adoption-journey)):

```mermaid
graph LR

    %% Define Styling
    classDef OpsStage fill:#11f,color:#fff
    classDef OtherStage fill:#ddd,color:#888

    %%% Define Stages
    P[Plan]:::OtherStage
    C[Create]:::OtherStage
    V[Verify]:::OpsStage
    Pa[Package]:::OpsStage
    R[Release]:::OpsStage
    Co[Configure]:::OpsStage
    M[Monitor]:::OpsStage
    S[Secure]:::OtherStage
    D[Govern]:::OtherStage

    %% Define Connections
    C -.- P
    P -.-> M
    V -.- S
    C ==> V
    V ==> R
    V ==> Pa
    V ==> Co
    R ==> M
    R -.- Co
    Co -.- D
    Co ==> M
    M -.- D

    subgraph "Legend"
       Legend1[Ops Stage]:::OpsStage == Critical Path ==> Legend2[Other Stage]:::OtherStage
       Legend1 -. Additional Path .-> Legend2
    end
```

The majority of our [Ops section product groups](https://handbook.gitlab.com/handbook/product/categories/#ops-section) are focused on driving adoption first, and then monetization within their category scope. Some groups are well placed to focus on monetization right away by adding tier value for [buyer personas](https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/product-and-solution-marketing/roles-personas/buyer-persona/) (e.g. development manager, director) on top of existing stages which already have heavy usage.

See more details about our [Product Performance Indicators](/company/kpis/#layers-of-kpis) in our [Ops Section Product Performance Indicators page](https://internal.gitlab.com/handbook/company/performance-indicators/product/ops-section/).

### Performance Indicator Goals
We track our quarterly Product Performance Indicator goals in our [internal handbook page](https://internal.gitlab.com/handbook/company/performance-indicators/product/ops-section/). We track our long-term Product Performance Indicator goals here.

## Personas and Jobs to Be Done

### Who is it for?
We identify the [personas](https://handbook.gitlab.com/handbook/product/personas/#user-personas) the Ops section features are built for. In order to be transparent about personas we support today and personas we aim to support in the future we use the following categorization of personas listed in priority order.
* 🟩- Targeted with strong support
* 🟨- Targeted but incomplete support
* ⬜️- Not targeted but might find value

#### Today
To capitalize on the [opportunities](#opportunities) listed above, the Ops section has features that make it useful to the following personas today.

1. 🟩 [Sasha - Software Developer](https://handbook.gitlab.com/handbook/product/personas/#sasha-software-developer)
1. 🟩 [Devon - DevOps Engineer](https://handbook.gitlab.com/handbook/product/personas/#devon-devops-engineer)
1. 🟨 [Ingrid - Infrastructure Operator](https://handbook.gitlab.com/handbook/product/personas/#ingrid-infrastructure-operator)
1. 🟨 [Allison - Application Ops](https://handbook.gitlab.com/handbook/product/personas/#allison-application-ops)
1. 🟨 [Simone - Software Engineer in Test](https://handbook.gitlab.com/handbook/product/personas/#simone-software-engineer-in-test)
≈
1. ⬜️ [Ops Teams](#composition)
1. ⬜️ Central IT / System Admins

#### Medium Term (1-2 years)
As we execute our [3-year strategy](#3-year-strategy), our medium term (1-2 year) goal is to provide a single application that enables collaboration between cloud native development and platform teams.

1. 🟩 [Sasha - Software Developer](https://handbook.gitlab.com/handbook/product/personas/#sasha-software-developer)
1. 🟩 [Devon - DevOps Engineer](https://handbook.gitlab.com/handbook/product/personas/#devon-devops-engineer)
1. 🟩 [Ingrid - Infrastructure Operator](https://handbook.gitlab.com/handbook/product/personas/#ingrid-infrastructure-operator)
1. 🟩 [Allison - Application Ops](https://handbook.gitlab.com/handbook/product/personas/#allison-application-ops)
1. 🟩 [Simone - Software Engineer in Test](https://handbook.gitlab.com/handbook/product/personas/#simone-software-engineer-in-test)
1. 🟩 [Delaney - Development Team Lead](https://handbook.gitlab.com/handbook/product/personas/#delaney-development-team-lead)
1. 🟩 [Rachel - Release Manager](https://handbook.gitlab.com/handbook/product/personas/#rachel-release-manager)
1. 🟨 [Ops Teams](#composition)
1. ⬜️ Central IT / System Admins


