### Scan everything, but don't get in the way

The increasing pace of modern software development demands that we push security testing further left than before, integrating it into existing workflows rather than forcing teams to adapt their processes or context-switch to separate tools.

Moving security scanning directly into the IDE and pre-commit stages enables developers to catch vulnerabilities, exposed secrets, and dependency issues before they even enter the codebase, dramatically reducing remediation costs and team overhead.

For this proactive approach to succeed, security tools must provide clear, actionable feedback that developers can understand without deep security expertise, including precise code locations and step-by-step remediation guidance with examples of secure coding patterns.

By making security both approachable and efficient, we help organizations build a true DevSecOps culture where security becomes a natural part of every developer's daily work, transforming how organizations approach application security while significantly reducing the burden on overburdened security specialists.

**To achieve this theme, GitLab will pursue capabilities like:**

- Delivering scan results at the speed of software development by offering:
  - Real-time scanning for SAST and SCA vulnerabilities and leaked secrets.
  - Intelligent incremental scans that avoid re-scanning parts of the application that haven't changed.
- Identifying runtime security issues early in the development phase with DAST unit tests and by running DAST scans in development environments like \`localhost\`.
- Integrating Secret Detection scanning across the platform to prevent leaked secrets in every written place like descriptions and comments on issues, epics, and merge requests, wikis, and more.
- Automatically scanning for CVEs in repositories and registries for dependencies, packages, and containers.
- Detecting malicious packages and prevent them from entering your software supply chain

### Make better risk decisions with richer context

In today's complex security landscape, presenting raw vulnerability data without context can lead teams to work on less impactful tasks or accept risks without realizing the consequences. That doesn't work well for anyone.

By combining multiple security scanning methods and leveraging more advanced techniques like AI and machine learning, we can provide deeper context and more accurate risk assessments for each security finding. This intelligence-driven approach helps teams cut through the noise of security alerts, focusing remediation efforts on vulnerabilities that pose the greatest actual risk to their applications. Integration across different security disciplines creates a comprehensive view of each vulnerability's impact and exploitability, enabling more confident decision-making about when and how to remediate issues.

The power of machine learning transforms security scanning from a simple detection tool into an intelligent advisory system that helps teams make informed, strategic decisions about their security posture and resource allocation.

**To achieve this theme, GitLab will pursue capabilities like:**

- Integrating detection capabilities across scanning disciplines to provide more actionable outcomes.
- Using SAST for advanced tasks like reachability analysis and API discovery, so we can enrich DAST and other scanning processes.
- Correlating and deduplicating scanning outputs to reduce noise, uncover the most urgent exploitable issues, and focus attention on the most impactful remediations.
- Leveraging AI/ML to reduce false positives by understanding normal code structure, commit history, and runtime behavior.

### Take action, not just inventory

When tools identify vulnerabilities but don't provide a clear path to resolution, organizations end up exposed to security risks for longer than necessary. Worse still, as backlogs of security issues grow, organizations end up accepting risks without realizing itâ€”an untriaged and unresolved vulnerability is one that's tacitly accepted.

Modern security tools must go beyond detection to provide automated remediation pathways that help both developers and security teams efficiently address vulnerabilities.

- Developers can make larger impacts when they receive automated merge requests for dependency updates, intelligent suggestions for fixing vulnerable code, and clear guidance on implementing secure alternatives directly within their development environment.
- Security professionals benefit from automated workflows that can immediately revoke exposed secrets, quarantine vulnerable dependencies, and orchestrate large-scale security updates across multiple repositories without manual legwork.

As applications and security threats grow more complex, effective security programs have to rely on automation to scale up. By transforming security findings into automated actions, intelligent tools help organizations dramatically reduce their mean time to remediation while allowing both development and security teams to focus on strategic work rather than routine maintenance.

**To achieve this theme, GitLab will pursue capabilities like:**

- Automating remediation actions like revoking exposed secrets, blocking insecure code, and upgrading vulnerable dependencies.
- Continuing to invest in GitLab Duo Vulnerability Explanation and Vulnerability Resolution to produce better recommendations.
- Providing automated system hardening, such as removing dependencies that are not in use.
- Improving AST scan results so that they are easier to understand and act on.
